version: '3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"





  kafka:
    container_name: kafka_broker_1
    image: wurstmeister/kafka
    links:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOSTNAME: kafka
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock%


  kafka2:
    container_name: kafka_broker_2
    image: wurstmeister/kafka
    links:
      - zookeeper
    ports:
      - "9093:9093"
      - "29093:29093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOSTNAME: kafka2
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka2:29093,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29093,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock%


  kafka3:
    container_name: kafka_broker_3
    image: wurstmeister/kafka
    links:
      - zookeeper
    ports:
      - "9094:9094"
      - "29094:29094"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOSTNAME: kafka3
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka3:29094,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29094,OUTSIDE://0.0.0.0:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock%


  schema-registry:
    image: confluentinc/cp-schema-registry
    hostname: schema-registry
    container_name: schema-registry
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka
      - kafka2
      - kafka3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092,kafka2:29093,kafka3:29094
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT



  connect:
    image: custom-confluent-image
    build: .
    hostname: connect
    container_name: connect
    restart: unless-stopped
    depends_on:
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092,kafka2:29093,kafka3:29094
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: zookeeper:2181


  ksql:
    image: confluentinc/ksqldb-server:0.18.0
    hostname: ksql
    container_name: ksql
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:29092,kafka2:29093,kafka3:29094
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"



  rest:
    image: rest:latest
    container_name: rest
    build:
      context: rest
      dockerfile: Dockerfile
    links:
      - kafka
      - kafka2
      - kafka3
      - schema-registry
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092,kafka2:29093,kafka3:29094
      - ROUTER-ENDPOINT=router-streams:7082
      - SERVER_PORT=8080
      - ELASTIC-ENDPOINT=elasticsearch:9200
      - BANKING_PARTITIONS=3
      - BANKING_REPLICAS=2
      - SCHEMA-ENDPOINT=schema-registry:8081
      - KSQL-ENDPOINT=ksql:8088
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - kafka2
      - kafka3
      - schema-registry
      - ksql




  transformer-streams:
    image: transformer-streams:latest
    container_name: transformer-streams
    build:
      context: transformer-streams
      dockerfile: Dockerfile
    links:
      - kafka
      - kafka2
      - kafka3
    ports:
      - "7081:7081"
    depends_on:
      - kafka
      - kafka2
      - kafka3
      - rest
      - schema-registry
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092,kafka2:29093,kafka3:29094
      - SERVER_PORT=7081
      - SCHEMA-ENDPOINT=http://schema-registry:8081





  router-streams:
    image: router-streams:latest
    container_name: router-streams
    build:
      context: router-streams
      dockerfile: Dockerfile
    links:
      - kafka
      - kafka2
      - kafka3
    ports:
      - "7082:7082"
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092,kafka2:29093,kafka3:29094
      - SERVER_PORT=7082
    depends_on:
      - kafka
      - kafka2
      - kafka3
      - rest





  db:
    image: postgres
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=BANK
    volumes:
      - ./bash/bank/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./bash/bank/data.sql:/docker-entrypoint-initdb.d/2-data.sql
      - /var/lib/postgresql/data





  persistence:
    image: persistence:latest
    container_name: persistence
    build:
      context: persistence
      dockerfile: Dockerfile
    links:
      - kafka
      - kafka2
      - kafka3
      - db
    ports:
      - "7083:7083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/BANK
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092,kafka2:29093,kafka3:29094
      - SERVER_PORT=7083
    depends_on:
      - kafka
      - kafka2
      - kafka3
      - db
      - rest




  dbTwo:
    image: postgres
    container_name: dbTwo
    ports:
      - "5442:5442"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=BANK2
    volumes:
      - ./bash/bank2/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./bash/bank2/data.sql:/docker-entrypoint-initdb.d/2-data.sql
      - /var/lib/postgresql/dataTwo



  persistence2:
    image: persistence:latest
    container_name: persistence2
    links:
      - dbTwo
      - kafka
      - kafka2
      - kafka3
    environment:
      - SPRING_PROFILES_ACTIVE=persistence2
      - SPRING_DATASOURCE_URL=jdbc:postgresql://dbTwo:5432/BANK2
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092,kafka2:29093,kafka3:29094
    build:
      context: persistence
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - kafka
      - kafka2
      - kafka3
      - dbTwo
      - rest



  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.9.3
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      cluster.name: bank-elastic-cluster
      discovery.type: single-node
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:7.9.3
    container_name: kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200

