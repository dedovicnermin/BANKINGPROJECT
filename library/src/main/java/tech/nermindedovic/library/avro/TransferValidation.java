/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tech.nermindedovic.library.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransferValidation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4229332862904172523L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransferValidation\",\"namespace\":\"tech.nermindedovic.library.avro\",\"fields\":[{\"name\":\"messageId\",\"type\":\"long\"},{\"name\":\"amount\",\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":2},{\"name\":\"currentLeg\",\"type\":\"int\",\"default\":1},{\"name\":\"transferMessage\",\"type\":\"string\"},{\"name\":\"debtorAccount\",\"type\":{\"type\":\"record\",\"name\":\"Debtor\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"long\"},{\"name\":\"routingNumber\",\"type\":\"long\"}]}},{\"name\":\"creditorAccount\",\"type\":{\"type\":\"record\",\"name\":\"Creditor\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"long\"},{\"name\":\"routingNumber\",\"type\":\"long\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransferValidation> ENCODER =
      new BinaryMessageEncoder<TransferValidation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransferValidation> DECODER =
      new BinaryMessageDecoder<TransferValidation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TransferValidation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TransferValidation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransferValidation>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TransferValidation to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TransferValidation from a ByteBuffer. */
  public static TransferValidation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long messageId;
  @Deprecated public java.nio.ByteBuffer amount;
  @Deprecated public int currentLeg;
  @Deprecated public java.lang.CharSequence transferMessage;
  @Deprecated public tech.nermindedovic.library.avro.Debtor debtorAccount;
  @Deprecated public tech.nermindedovic.library.avro.Creditor creditorAccount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransferValidation() {}

  /**
   * All-args constructor.
   * @param messageId The new value for messageId
   * @param amount The new value for amount
   * @param currentLeg The new value for currentLeg
   * @param transferMessage The new value for transferMessage
   * @param debtorAccount The new value for debtorAccount
   * @param creditorAccount The new value for creditorAccount
   */
  public TransferValidation(java.lang.Long messageId, java.nio.ByteBuffer amount, java.lang.Integer currentLeg, java.lang.CharSequence transferMessage, tech.nermindedovic.library.avro.Debtor debtorAccount, tech.nermindedovic.library.avro.Creditor creditorAccount) {
    this.messageId = messageId;
    this.amount = amount;
    this.currentLeg = currentLeg;
    this.transferMessage = transferMessage;
    this.debtorAccount = debtorAccount;
    this.creditorAccount = creditorAccount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return messageId;
    case 1: return amount;
    case 2: return currentLeg;
    case 3: return transferMessage;
    case 4: return debtorAccount;
    case 5: return creditorAccount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: messageId = (java.lang.Long)value$; break;
    case 1: amount = (java.nio.ByteBuffer)value$; break;
    case 2: currentLeg = (java.lang.Integer)value$; break;
    case 3: transferMessage = (java.lang.CharSequence)value$; break;
    case 4: debtorAccount = (tech.nermindedovic.library.avro.Debtor)value$; break;
    case 5: creditorAccount = (tech.nermindedovic.library.avro.Creditor)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'messageId' field.
   * @return The value of the 'messageId' field.
   */
  public java.lang.Long getMessageId() {
    return messageId;
  }

  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.Long value) {
    this.messageId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.nio.ByteBuffer getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.nio.ByteBuffer value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currentLeg' field.
   * @return The value of the 'currentLeg' field.
   */
  public java.lang.Integer getCurrentLeg() {
    return currentLeg;
  }

  /**
   * Sets the value of the 'currentLeg' field.
   * @param value the value to set.
   */
  public void setCurrentLeg(java.lang.Integer value) {
    this.currentLeg = value;
  }

  /**
   * Gets the value of the 'transferMessage' field.
   * @return The value of the 'transferMessage' field.
   */
  public java.lang.CharSequence getTransferMessage() {
    return transferMessage;
  }

  /**
   * Sets the value of the 'transferMessage' field.
   * @param value the value to set.
   */
  public void setTransferMessage(java.lang.CharSequence value) {
    this.transferMessage = value;
  }

  /**
   * Gets the value of the 'debtorAccount' field.
   * @return The value of the 'debtorAccount' field.
   */
  public tech.nermindedovic.library.avro.Debtor getDebtorAccount() {
    return debtorAccount;
  }

  /**
   * Sets the value of the 'debtorAccount' field.
   * @param value the value to set.
   */
  public void setDebtorAccount(tech.nermindedovic.library.avro.Debtor value) {
    this.debtorAccount = value;
  }

  /**
   * Gets the value of the 'creditorAccount' field.
   * @return The value of the 'creditorAccount' field.
   */
  public tech.nermindedovic.library.avro.Creditor getCreditorAccount() {
    return creditorAccount;
  }

  /**
   * Sets the value of the 'creditorAccount' field.
   * @param value the value to set.
   */
  public void setCreditorAccount(tech.nermindedovic.library.avro.Creditor value) {
    this.creditorAccount = value;
  }

  /**
   * Creates a new TransferValidation RecordBuilder.
   * @return A new TransferValidation RecordBuilder
   */
  public static tech.nermindedovic.library.avro.TransferValidation.Builder newBuilder() {
    return new tech.nermindedovic.library.avro.TransferValidation.Builder();
  }

  /**
   * Creates a new TransferValidation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransferValidation RecordBuilder
   */
  public static tech.nermindedovic.library.avro.TransferValidation.Builder newBuilder(tech.nermindedovic.library.avro.TransferValidation.Builder other) {
    return new tech.nermindedovic.library.avro.TransferValidation.Builder(other);
  }

  /**
   * Creates a new TransferValidation RecordBuilder by copying an existing TransferValidation instance.
   * @param other The existing instance to copy.
   * @return A new TransferValidation RecordBuilder
   */
  public static tech.nermindedovic.library.avro.TransferValidation.Builder newBuilder(tech.nermindedovic.library.avro.TransferValidation other) {
    return new tech.nermindedovic.library.avro.TransferValidation.Builder(other);
  }

  /**
   * RecordBuilder for TransferValidation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransferValidation>
    implements org.apache.avro.data.RecordBuilder<TransferValidation> {

    private long messageId;
    private java.nio.ByteBuffer amount;
    private int currentLeg;
    private java.lang.CharSequence transferMessage;
    private tech.nermindedovic.library.avro.Debtor debtorAccount;
    private tech.nermindedovic.library.avro.Debtor.Builder debtorAccountBuilder;
    private tech.nermindedovic.library.avro.Creditor creditorAccount;
    private tech.nermindedovic.library.avro.Creditor.Builder creditorAccountBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tech.nermindedovic.library.avro.TransferValidation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.messageId)) {
        this.messageId = data().deepCopy(fields()[0].schema(), other.messageId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currentLeg)) {
        this.currentLeg = data().deepCopy(fields()[2].schema(), other.currentLeg);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transferMessage)) {
        this.transferMessage = data().deepCopy(fields()[3].schema(), other.transferMessage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.debtorAccount)) {
        this.debtorAccount = data().deepCopy(fields()[4].schema(), other.debtorAccount);
        fieldSetFlags()[4] = true;
      }
      if (other.hasDebtorAccountBuilder()) {
        this.debtorAccountBuilder = tech.nermindedovic.library.avro.Debtor.newBuilder(other.getDebtorAccountBuilder());
      }
      if (isValidValue(fields()[5], other.creditorAccount)) {
        this.creditorAccount = data().deepCopy(fields()[5].schema(), other.creditorAccount);
        fieldSetFlags()[5] = true;
      }
      if (other.hasCreditorAccountBuilder()) {
        this.creditorAccountBuilder = tech.nermindedovic.library.avro.Creditor.newBuilder(other.getCreditorAccountBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TransferValidation instance
     * @param other The existing instance to copy.
     */
    private Builder(tech.nermindedovic.library.avro.TransferValidation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.messageId)) {
        this.messageId = data().deepCopy(fields()[0].schema(), other.messageId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currentLeg)) {
        this.currentLeg = data().deepCopy(fields()[2].schema(), other.currentLeg);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transferMessage)) {
        this.transferMessage = data().deepCopy(fields()[3].schema(), other.transferMessage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.debtorAccount)) {
        this.debtorAccount = data().deepCopy(fields()[4].schema(), other.debtorAccount);
        fieldSetFlags()[4] = true;
      }
      this.debtorAccountBuilder = null;
      if (isValidValue(fields()[5], other.creditorAccount)) {
        this.creditorAccount = data().deepCopy(fields()[5].schema(), other.creditorAccount);
        fieldSetFlags()[5] = true;
      }
      this.creditorAccountBuilder = null;
    }

    /**
      * Gets the value of the 'messageId' field.
      * @return The value.
      */
    public java.lang.Long getMessageId() {
      return messageId;
    }

    /**
      * Sets the value of the 'messageId' field.
      * @param value The value of 'messageId'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder setMessageId(long value) {
      validate(fields()[0], value);
      this.messageId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'messageId' field has been set.
      * @return True if the 'messageId' field has been set, false otherwise.
      */
    public boolean hasMessageId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'messageId' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder clearMessageId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder setAmount(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentLeg' field.
      * @return The value.
      */
    public java.lang.Integer getCurrentLeg() {
      return currentLeg;
    }

    /**
      * Sets the value of the 'currentLeg' field.
      * @param value The value of 'currentLeg'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder setCurrentLeg(int value) {
      validate(fields()[2], value);
      this.currentLeg = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currentLeg' field has been set.
      * @return True if the 'currentLeg' field has been set, false otherwise.
      */
    public boolean hasCurrentLeg() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currentLeg' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder clearCurrentLeg() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transferMessage' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransferMessage() {
      return transferMessage;
    }

    /**
      * Sets the value of the 'transferMessage' field.
      * @param value The value of 'transferMessage'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder setTransferMessage(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.transferMessage = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transferMessage' field has been set.
      * @return True if the 'transferMessage' field has been set, false otherwise.
      */
    public boolean hasTransferMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'transferMessage' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder clearTransferMessage() {
      transferMessage = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'debtorAccount' field.
      * @return The value.
      */
    public tech.nermindedovic.library.avro.Debtor getDebtorAccount() {
      return debtorAccount;
    }

    /**
      * Sets the value of the 'debtorAccount' field.
      * @param value The value of 'debtorAccount'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder setDebtorAccount(tech.nermindedovic.library.avro.Debtor value) {
      validate(fields()[4], value);
      this.debtorAccountBuilder = null;
      this.debtorAccount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'debtorAccount' field has been set.
      * @return True if the 'debtorAccount' field has been set, false otherwise.
      */
    public boolean hasDebtorAccount() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'debtorAccount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public tech.nermindedovic.library.avro.Debtor.Builder getDebtorAccountBuilder() {
      if (debtorAccountBuilder == null) {
        if (hasDebtorAccount()) {
          setDebtorAccountBuilder(tech.nermindedovic.library.avro.Debtor.newBuilder(debtorAccount));
        } else {
          setDebtorAccountBuilder(tech.nermindedovic.library.avro.Debtor.newBuilder());
        }
      }
      return debtorAccountBuilder;
    }

    /**
     * Sets the Builder instance for the 'debtorAccount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public tech.nermindedovic.library.avro.TransferValidation.Builder setDebtorAccountBuilder(tech.nermindedovic.library.avro.Debtor.Builder value) {
      clearDebtorAccount();
      debtorAccountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'debtorAccount' field has an active Builder instance
     * @return True if the 'debtorAccount' field has an active Builder instance
     */
    public boolean hasDebtorAccountBuilder() {
      return debtorAccountBuilder != null;
    }

    /**
      * Clears the value of the 'debtorAccount' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder clearDebtorAccount() {
      debtorAccount = null;
      debtorAccountBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'creditorAccount' field.
      * @return The value.
      */
    public tech.nermindedovic.library.avro.Creditor getCreditorAccount() {
      return creditorAccount;
    }

    /**
      * Sets the value of the 'creditorAccount' field.
      * @param value The value of 'creditorAccount'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder setCreditorAccount(tech.nermindedovic.library.avro.Creditor value) {
      validate(fields()[5], value);
      this.creditorAccountBuilder = null;
      this.creditorAccount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'creditorAccount' field has been set.
      * @return True if the 'creditorAccount' field has been set, false otherwise.
      */
    public boolean hasCreditorAccount() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'creditorAccount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public tech.nermindedovic.library.avro.Creditor.Builder getCreditorAccountBuilder() {
      if (creditorAccountBuilder == null) {
        if (hasCreditorAccount()) {
          setCreditorAccountBuilder(tech.nermindedovic.library.avro.Creditor.newBuilder(creditorAccount));
        } else {
          setCreditorAccountBuilder(tech.nermindedovic.library.avro.Creditor.newBuilder());
        }
      }
      return creditorAccountBuilder;
    }

    /**
     * Sets the Builder instance for the 'creditorAccount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public tech.nermindedovic.library.avro.TransferValidation.Builder setCreditorAccountBuilder(tech.nermindedovic.library.avro.Creditor.Builder value) {
      clearCreditorAccount();
      creditorAccountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'creditorAccount' field has an active Builder instance
     * @return True if the 'creditorAccount' field has an active Builder instance
     */
    public boolean hasCreditorAccountBuilder() {
      return creditorAccountBuilder != null;
    }

    /**
      * Clears the value of the 'creditorAccount' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferValidation.Builder clearCreditorAccount() {
      creditorAccount = null;
      creditorAccountBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransferValidation build() {
      try {
        TransferValidation record = new TransferValidation();
        record.messageId = fieldSetFlags()[0] ? this.messageId : (java.lang.Long) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.currentLeg = fieldSetFlags()[2] ? this.currentLeg : (java.lang.Integer) defaultValue(fields()[2]);
        record.transferMessage = fieldSetFlags()[3] ? this.transferMessage : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (debtorAccountBuilder != null) {
          record.debtorAccount = this.debtorAccountBuilder.build();
        } else {
          record.debtorAccount = fieldSetFlags()[4] ? this.debtorAccount : (tech.nermindedovic.library.avro.Debtor) defaultValue(fields()[4]);
        }
        if (creditorAccountBuilder != null) {
          record.creditorAccount = this.creditorAccountBuilder.build();
        } else {
          record.creditorAccount = fieldSetFlags()[5] ? this.creditorAccount : (tech.nermindedovic.library.avro.Creditor) defaultValue(fields()[5]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransferValidation>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransferValidation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransferValidation>
    READER$ = (org.apache.avro.io.DatumReader<TransferValidation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
