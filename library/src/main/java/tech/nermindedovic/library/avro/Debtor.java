/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tech.nermindedovic.library.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Debtor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2780076720512321519L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Debtor\",\"namespace\":\"tech.nermindedovic.library.avro\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"long\"},{\"name\":\"routingNumber\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Debtor> ENCODER =
      new BinaryMessageEncoder<Debtor>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Debtor> DECODER =
      new BinaryMessageDecoder<Debtor>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Debtor> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Debtor> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Debtor>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Debtor to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Debtor from a ByteBuffer. */
  public static Debtor fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long accountNumber;
  @Deprecated public long routingNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Debtor() {}

  /**
   * All-args constructor.
   * @param accountNumber The new value for accountNumber
   * @param routingNumber The new value for routingNumber
   */
  public Debtor(java.lang.Long accountNumber, java.lang.Long routingNumber) {
    this.accountNumber = accountNumber;
    this.routingNumber = routingNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return accountNumber;
    case 1: return routingNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: accountNumber = (java.lang.Long)value$; break;
    case 1: routingNumber = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accountNumber' field.
   * @return The value of the 'accountNumber' field.
   */
  public java.lang.Long getAccountNumber() {
    return accountNumber;
  }

  /**
   * Sets the value of the 'accountNumber' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.Long value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'routingNumber' field.
   * @return The value of the 'routingNumber' field.
   */
  public java.lang.Long getRoutingNumber() {
    return routingNumber;
  }

  /**
   * Sets the value of the 'routingNumber' field.
   * @param value the value to set.
   */
  public void setRoutingNumber(java.lang.Long value) {
    this.routingNumber = value;
  }

  /**
   * Creates a new Debtor RecordBuilder.
   * @return A new Debtor RecordBuilder
   */
  public static tech.nermindedovic.library.avro.Debtor.Builder newBuilder() {
    return new tech.nermindedovic.library.avro.Debtor.Builder();
  }

  /**
   * Creates a new Debtor RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Debtor RecordBuilder
   */
  public static tech.nermindedovic.library.avro.Debtor.Builder newBuilder(tech.nermindedovic.library.avro.Debtor.Builder other) {
    return new tech.nermindedovic.library.avro.Debtor.Builder(other);
  }

  /**
   * Creates a new Debtor RecordBuilder by copying an existing Debtor instance.
   * @param other The existing instance to copy.
   * @return A new Debtor RecordBuilder
   */
  public static tech.nermindedovic.library.avro.Debtor.Builder newBuilder(tech.nermindedovic.library.avro.Debtor other) {
    return new tech.nermindedovic.library.avro.Debtor.Builder(other);
  }

  /**
   * RecordBuilder for Debtor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Debtor>
    implements org.apache.avro.data.RecordBuilder<Debtor> {

    private long accountNumber;
    private long routingNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tech.nermindedovic.library.avro.Debtor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[0].schema(), other.accountNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.routingNumber)) {
        this.routingNumber = data().deepCopy(fields()[1].schema(), other.routingNumber);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Debtor instance
     * @param other The existing instance to copy.
     */
    private Builder(tech.nermindedovic.library.avro.Debtor other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[0].schema(), other.accountNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.routingNumber)) {
        this.routingNumber = data().deepCopy(fields()[1].schema(), other.routingNumber);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'accountNumber' field.
      * @return The value.
      */
    public java.lang.Long getAccountNumber() {
      return accountNumber;
    }

    /**
      * Sets the value of the 'accountNumber' field.
      * @param value The value of 'accountNumber'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.Debtor.Builder setAccountNumber(long value) {
      validate(fields()[0], value);
      this.accountNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNumber' field has been set.
      * @return True if the 'accountNumber' field has been set, false otherwise.
      */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'accountNumber' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.Debtor.Builder clearAccountNumber() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'routingNumber' field.
      * @return The value.
      */
    public java.lang.Long getRoutingNumber() {
      return routingNumber;
    }

    /**
      * Sets the value of the 'routingNumber' field.
      * @param value The value of 'routingNumber'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.Debtor.Builder setRoutingNumber(long value) {
      validate(fields()[1], value);
      this.routingNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'routingNumber' field has been set.
      * @return True if the 'routingNumber' field has been set, false otherwise.
      */
    public boolean hasRoutingNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'routingNumber' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.Debtor.Builder clearRoutingNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Debtor build() {
      try {
        Debtor record = new Debtor();
        record.accountNumber = fieldSetFlags()[0] ? this.accountNumber : (java.lang.Long) defaultValue(fields()[0]);
        record.routingNumber = fieldSetFlags()[1] ? this.routingNumber : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Debtor>
    WRITER$ = (org.apache.avro.io.DatumWriter<Debtor>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Debtor>
    READER$ = (org.apache.avro.io.DatumReader<Debtor>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
