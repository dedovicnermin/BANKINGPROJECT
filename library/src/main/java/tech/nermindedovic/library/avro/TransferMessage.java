/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tech.nermindedovic.library.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransferMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -972993292686617486L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransferMessage\",\"namespace\":\"tech.nermindedovic.library.avro\",\"fields\":[{\"name\":\"messageId\",\"type\":\"long\"},{\"name\":\"creditor\",\"type\":{\"type\":\"record\",\"name\":\"Creditor\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"long\"},{\"name\":\"routingNumber\",\"type\":\"long\"}]}},{\"name\":\"debtor\",\"type\":{\"type\":\"record\",\"name\":\"Debtor\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"long\"},{\"name\":\"routingNumber\",\"type\":\"long\"}]}},{\"name\":\"date\",\"type\":\"int\",\"logicalType\":\"date\"},{\"name\":\"amount\",\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":2},{\"name\":\"memo\",\"type\":\"string\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransferMessage> ENCODER =
      new BinaryMessageEncoder<TransferMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransferMessage> DECODER =
      new BinaryMessageDecoder<TransferMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TransferMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TransferMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransferMessage>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TransferMessage to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TransferMessage from a ByteBuffer. */
  public static TransferMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long messageId;
  @Deprecated public tech.nermindedovic.library.avro.Creditor creditor;
  @Deprecated public tech.nermindedovic.library.avro.Debtor debtor;
  @Deprecated public int date;
  @Deprecated public java.nio.ByteBuffer amount;
  @Deprecated public java.lang.CharSequence memo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransferMessage() {}

  /**
   * All-args constructor.
   * @param messageId The new value for messageId
   * @param creditor The new value for creditor
   * @param debtor The new value for debtor
   * @param date The new value for date
   * @param amount The new value for amount
   * @param memo The new value for memo
   */
  public TransferMessage(java.lang.Long messageId, tech.nermindedovic.library.avro.Creditor creditor, tech.nermindedovic.library.avro.Debtor debtor, java.lang.Integer date, java.nio.ByteBuffer amount, java.lang.CharSequence memo) {
    this.messageId = messageId;
    this.creditor = creditor;
    this.debtor = debtor;
    this.date = date;
    this.amount = amount;
    this.memo = memo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return messageId;
    case 1: return creditor;
    case 2: return debtor;
    case 3: return date;
    case 4: return amount;
    case 5: return memo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: messageId = (java.lang.Long)value$; break;
    case 1: creditor = (tech.nermindedovic.library.avro.Creditor)value$; break;
    case 2: debtor = (tech.nermindedovic.library.avro.Debtor)value$; break;
    case 3: date = (java.lang.Integer)value$; break;
    case 4: amount = (java.nio.ByteBuffer)value$; break;
    case 5: memo = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'messageId' field.
   * @return The value of the 'messageId' field.
   */
  public java.lang.Long getMessageId() {
    return messageId;
  }

  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.Long value) {
    this.messageId = value;
  }

  /**
   * Gets the value of the 'creditor' field.
   * @return The value of the 'creditor' field.
   */
  public tech.nermindedovic.library.avro.Creditor getCreditor() {
    return creditor;
  }

  /**
   * Sets the value of the 'creditor' field.
   * @param value the value to set.
   */
  public void setCreditor(tech.nermindedovic.library.avro.Creditor value) {
    this.creditor = value;
  }

  /**
   * Gets the value of the 'debtor' field.
   * @return The value of the 'debtor' field.
   */
  public tech.nermindedovic.library.avro.Debtor getDebtor() {
    return debtor;
  }

  /**
   * Sets the value of the 'debtor' field.
   * @param value the value to set.
   */
  public void setDebtor(tech.nermindedovic.library.avro.Debtor value) {
    this.debtor = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.Integer getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.Integer value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.nio.ByteBuffer getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.nio.ByteBuffer value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'memo' field.
   * @return The value of the 'memo' field.
   */
  public java.lang.CharSequence getMemo() {
    return memo;
  }

  /**
   * Sets the value of the 'memo' field.
   * @param value the value to set.
   */
  public void setMemo(java.lang.CharSequence value) {
    this.memo = value;
  }

  /**
   * Creates a new TransferMessage RecordBuilder.
   * @return A new TransferMessage RecordBuilder
   */
  public static tech.nermindedovic.library.avro.TransferMessage.Builder newBuilder() {
    return new tech.nermindedovic.library.avro.TransferMessage.Builder();
  }

  /**
   * Creates a new TransferMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransferMessage RecordBuilder
   */
  public static tech.nermindedovic.library.avro.TransferMessage.Builder newBuilder(tech.nermindedovic.library.avro.TransferMessage.Builder other) {
    return new tech.nermindedovic.library.avro.TransferMessage.Builder(other);
  }

  /**
   * Creates a new TransferMessage RecordBuilder by copying an existing TransferMessage instance.
   * @param other The existing instance to copy.
   * @return A new TransferMessage RecordBuilder
   */
  public static tech.nermindedovic.library.avro.TransferMessage.Builder newBuilder(tech.nermindedovic.library.avro.TransferMessage other) {
    return new tech.nermindedovic.library.avro.TransferMessage.Builder(other);
  }

  /**
   * RecordBuilder for TransferMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransferMessage>
    implements org.apache.avro.data.RecordBuilder<TransferMessage> {

    private long messageId;
    private tech.nermindedovic.library.avro.Creditor creditor;
    private tech.nermindedovic.library.avro.Creditor.Builder creditorBuilder;
    private tech.nermindedovic.library.avro.Debtor debtor;
    private tech.nermindedovic.library.avro.Debtor.Builder debtorBuilder;
    private int date;
    private java.nio.ByteBuffer amount;
    private java.lang.CharSequence memo;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tech.nermindedovic.library.avro.TransferMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.messageId)) {
        this.messageId = data().deepCopy(fields()[0].schema(), other.messageId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.creditor)) {
        this.creditor = data().deepCopy(fields()[1].schema(), other.creditor);
        fieldSetFlags()[1] = true;
      }
      if (other.hasCreditorBuilder()) {
        this.creditorBuilder = tech.nermindedovic.library.avro.Creditor.newBuilder(other.getCreditorBuilder());
      }
      if (isValidValue(fields()[2], other.debtor)) {
        this.debtor = data().deepCopy(fields()[2].schema(), other.debtor);
        fieldSetFlags()[2] = true;
      }
      if (other.hasDebtorBuilder()) {
        this.debtorBuilder = tech.nermindedovic.library.avro.Debtor.newBuilder(other.getDebtorBuilder());
      }
      if (isValidValue(fields()[3], other.date)) {
        this.date = data().deepCopy(fields()[3].schema(), other.date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.memo)) {
        this.memo = data().deepCopy(fields()[5].schema(), other.memo);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TransferMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(tech.nermindedovic.library.avro.TransferMessage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.messageId)) {
        this.messageId = data().deepCopy(fields()[0].schema(), other.messageId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.creditor)) {
        this.creditor = data().deepCopy(fields()[1].schema(), other.creditor);
        fieldSetFlags()[1] = true;
      }
      this.creditorBuilder = null;
      if (isValidValue(fields()[2], other.debtor)) {
        this.debtor = data().deepCopy(fields()[2].schema(), other.debtor);
        fieldSetFlags()[2] = true;
      }
      this.debtorBuilder = null;
      if (isValidValue(fields()[3], other.date)) {
        this.date = data().deepCopy(fields()[3].schema(), other.date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.memo)) {
        this.memo = data().deepCopy(fields()[5].schema(), other.memo);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'messageId' field.
      * @return The value.
      */
    public java.lang.Long getMessageId() {
      return messageId;
    }

    /**
      * Sets the value of the 'messageId' field.
      * @param value The value of 'messageId'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder setMessageId(long value) {
      validate(fields()[0], value);
      this.messageId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'messageId' field has been set.
      * @return True if the 'messageId' field has been set, false otherwise.
      */
    public boolean hasMessageId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'messageId' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder clearMessageId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'creditor' field.
      * @return The value.
      */
    public tech.nermindedovic.library.avro.Creditor getCreditor() {
      return creditor;
    }

    /**
      * Sets the value of the 'creditor' field.
      * @param value The value of 'creditor'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder setCreditor(tech.nermindedovic.library.avro.Creditor value) {
      validate(fields()[1], value);
      this.creditorBuilder = null;
      this.creditor = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'creditor' field has been set.
      * @return True if the 'creditor' field has been set, false otherwise.
      */
    public boolean hasCreditor() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'creditor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public tech.nermindedovic.library.avro.Creditor.Builder getCreditorBuilder() {
      if (creditorBuilder == null) {
        if (hasCreditor()) {
          setCreditorBuilder(tech.nermindedovic.library.avro.Creditor.newBuilder(creditor));
        } else {
          setCreditorBuilder(tech.nermindedovic.library.avro.Creditor.newBuilder());
        }
      }
      return creditorBuilder;
    }

    /**
     * Sets the Builder instance for the 'creditor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public tech.nermindedovic.library.avro.TransferMessage.Builder setCreditorBuilder(tech.nermindedovic.library.avro.Creditor.Builder value) {
      clearCreditor();
      creditorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'creditor' field has an active Builder instance
     * @return True if the 'creditor' field has an active Builder instance
     */
    public boolean hasCreditorBuilder() {
      return creditorBuilder != null;
    }

    /**
      * Clears the value of the 'creditor' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder clearCreditor() {
      creditor = null;
      creditorBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'debtor' field.
      * @return The value.
      */
    public tech.nermindedovic.library.avro.Debtor getDebtor() {
      return debtor;
    }

    /**
      * Sets the value of the 'debtor' field.
      * @param value The value of 'debtor'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder setDebtor(tech.nermindedovic.library.avro.Debtor value) {
      validate(fields()[2], value);
      this.debtorBuilder = null;
      this.debtor = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'debtor' field has been set.
      * @return True if the 'debtor' field has been set, false otherwise.
      */
    public boolean hasDebtor() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'debtor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public tech.nermindedovic.library.avro.Debtor.Builder getDebtorBuilder() {
      if (debtorBuilder == null) {
        if (hasDebtor()) {
          setDebtorBuilder(tech.nermindedovic.library.avro.Debtor.newBuilder(debtor));
        } else {
          setDebtorBuilder(tech.nermindedovic.library.avro.Debtor.newBuilder());
        }
      }
      return debtorBuilder;
    }

    /**
     * Sets the Builder instance for the 'debtor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public tech.nermindedovic.library.avro.TransferMessage.Builder setDebtorBuilder(tech.nermindedovic.library.avro.Debtor.Builder value) {
      clearDebtor();
      debtorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'debtor' field has an active Builder instance
     * @return True if the 'debtor' field has an active Builder instance
     */
    public boolean hasDebtorBuilder() {
      return debtorBuilder != null;
    }

    /**
      * Clears the value of the 'debtor' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder clearDebtor() {
      debtor = null;
      debtorBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.Integer getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder setDate(int value) {
      validate(fields()[3], value);
      this.date = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder clearDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder setAmount(java.nio.ByteBuffer value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'memo' field.
      * @return The value.
      */
    public java.lang.CharSequence getMemo() {
      return memo;
    }

    /**
      * Sets the value of the 'memo' field.
      * @param value The value of 'memo'.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder setMemo(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.memo = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'memo' field has been set.
      * @return True if the 'memo' field has been set, false otherwise.
      */
    public boolean hasMemo() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'memo' field.
      * @return This builder.
      */
    public tech.nermindedovic.library.avro.TransferMessage.Builder clearMemo() {
      memo = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransferMessage build() {
      try {
        TransferMessage record = new TransferMessage();
        record.messageId = fieldSetFlags()[0] ? this.messageId : (java.lang.Long) defaultValue(fields()[0]);
        if (creditorBuilder != null) {
          record.creditor = this.creditorBuilder.build();
        } else {
          record.creditor = fieldSetFlags()[1] ? this.creditor : (tech.nermindedovic.library.avro.Creditor) defaultValue(fields()[1]);
        }
        if (debtorBuilder != null) {
          record.debtor = this.debtorBuilder.build();
        } else {
          record.debtor = fieldSetFlags()[2] ? this.debtor : (tech.nermindedovic.library.avro.Debtor) defaultValue(fields()[2]);
        }
        record.date = fieldSetFlags()[3] ? this.date : (java.lang.Integer) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.nio.ByteBuffer) defaultValue(fields()[4]);
        record.memo = fieldSetFlags()[5] ? this.memo : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransferMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransferMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransferMessage>
    READER$ = (org.apache.avro.io.DatumReader<TransferMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
