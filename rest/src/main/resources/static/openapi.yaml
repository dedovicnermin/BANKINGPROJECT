openapi: 3.0.0
info:
  title: "Banking Project API"
  description: "A multi-module maven project with micro-services leveraging event-driven programming. Main goal of the application is to resemble a real-time banking/payment application. Notable applications that reflect the goal of the project include Zelle or Venmo, in which payments are correctly routed and updated into valid accounts. This project relies on leveraging `Spring Boot, Spring Cloud, Kafka API, and Kafka Streams API` to achieve event-driven functionality."
  version: "0.0.1"
  contact:
    name: "BANKING PROJECT API"
    url: "http://localhost:8080/swagger-ui/"
    email: "dedovicnermin@outlook.com"





tags:
  - name: Banking Requests
    externalDocs:
      description: Find out more about what this API will be doing under the hood
      url: https://github.com/dedovicnermin/BANKINGPROJECT/wiki/2.-High-Level-Representation
  - name: BalanceUpdate
    description: Retrieve an account balance.

  - name: TransferFunds
    description: "Send a `TransferMessage` to the bank(s)"

  - name: TransferStatus
    description: Retrieve the status of your transfer using a messageId



paths:
  /balance:
    post:
      tags:
        - BalanceUpdate
      summary: "Given valid account credentials, will return a BalanceMessage with balance property populated. Otherwise, errors flag will be activated."
      operationId: getBalanceUpdate
      requestBody:
        description: "A `BalanceMessage` without extra luggage."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BalanceMessage"
            examples:
              user1_111:
                value:
                  accountNumber: 1
                  routingNumber: 111
              user2_111:
                value:
                  accountNumber: 2
                  routingNumber: 111
              user3_111:
                value:
                  accountNumber: 3
                  routingNumber: 111
              user4_111:
                value:
                  accountNumber: 4
                  routingNumber: 111
              user5_111:
                value:
                  accountNumber: 5
                  routingNumber: 111
              user6_222:
                value:
                  accountNumber: 6
                  routingNumber: 222
              user7_222:
                value:
                  accountNumber: 7
                  routingNumber: 222
              user8_222:
                value:
                  accountNumber: 8
                  routingNumber: 222
              user9_222:
                value:
                  accountNumber: 9
                  routingNumber: 222
              user10_222:
                value:
                  accountNumber: 10
                  routingNumber: 222
      responses:
        200:
          description: "Balance Request returns from the Kafka broker."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceMessage'
              examples:
                passing:
                  value:
                    accountNumber: 1
                    routingNumber: 111
                    balance: "100.00"
                    errors: false
                failing:
                  value:
                    accountNumber: 3524
                    routingNumber: 234234
                    balance: "0.00"
                    errors: true
        404:
          description: "Failed operation. Kafka issue / invalid body."




  /funds/transfer:
    post:
      tags:
        - TransferFunds
      summary: Send a transfer request using valid creditor/debtor account credentials
      operationId: fundsTransferRequest
      requestBody:
        description: TransferMessage carrying account/payment information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferMessage"
            examples:
              singleBank_routing_111:
                value:
                  creditor:
                    accountNumber: 3
                    routingNumber: 111
                  debtor:
                    accountNumber: 2
                    routingNumber: 111
                  date: "03-15-2021"
                  amount: "1000.00"
                  memo: "Single bank test routing 111. Debtor ($2000.00 -> $1000.00). Creditor ($3000.00 -> $4000.00)"

              singleBank_routing_222:
                value:
                  creditor:
                    accountNumber: 9
                    routingNumber: 222
                  debtor:
                    accountNumber: 10
                    routingNumber: 222
                  date: "03-15-2021"
                  amount: "1000.00"
                  memo: "Single bank test routing 222. Debtor ($5000.00 -> $4000.00). Creditor ($4000.00 -> $5000.00)"

              twoBank_routing:
                value:
                  creditor:
                    accountNumber: 1
                    routingNumber: 111
                  debtor:
                    accountNumber: 6
                    routingNumber: 222
                  date: "03-16-2021"
                  amount: "500.00"
                  memo: "two bank test. Debtor($1000.00 -> $500.00). Creditor($1000.00 -> $1500.00)"


              insufficient_funds_test:
                value:
                  creditor:
                    accountNumber: 10
                    routingNumber: 222
                  debtor:
                    accountNumber: 6
                    routingNumber: 222
                  date: "03-15-2021"
                  amount: "2000.00"
                  memo: "Heres for that bet we made last Thursday, you lucky dawg!"


              invalidAccount_test:
                value:
                  creditor:
                    accountNumber: 1
                    routingNumber: 222
                    debtor:
                      accountNumber: 8
                      routingNumber: 222
                    date: "03-23-2021"
                    amount: "1.50"
                    memo: "Buy yourself some coffee. Creditor is invalid."

              invalidRouting_test:
                value:
                  creditor:
                    accountNumber: 10
                    routingNumber: 123
                  debtor:
                    accountNumber: 6
                    routingNumber: 222
                  date: "03-25-2021"
                  amount: "8.00"
                  memo: "Subway"


      responses:
        200:
          description: "Displaying if TransferMessage was sent to the broker. Will return the TransferMessage ID that can be used to query TransferStatus."
          content:
            text/html:
              schema:
                type: string
                description: "Notifying user wether the message has been successfully sent to the Kafka broker. Includes the TransferMessage ID."
                example: "Message with ID {3245345} has been successfully sent."

  /transfer/status/{id}:
    get:
      tags:
        - TransferStatus
      summary: "Responds with status of transfer given transfer id."
      operationId: getTransferStatus
      parameters:
        - name: id
          in: path
          description: 'associated with a `TransferMessage`'
          required: true
          schema:
            type: number
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                enum: [ FAIL, PROCESSING, PERSISTED ]
                example: PERSISTED

  /transactions:
    get:
      tags:
        - getAllTransactions
      summary: "Retrieves all transactions - Elasticsearch."
      operationId: getAllTransactions
      responses:
        200:
          description: Successful operation.
        400:
          description: Unsuccessful operation.

  /transactions/bank1:
    get:
      tags:
        - getAllBank1Transactions
      summary: "Retrieves all transactions from Bank1 - ElasticSearch."
      operationId: getAllBank1Transactions
      responses:
        200:
          description: Successful operation.
        400:
          description: Unsuccessful operation.

  /transactions/bank2:
    get:
      tags:
        - getAllBank2Transactions
      summary: "Retrieves all transactions from Bank2 - Elasticsearch."
      operationId: getAllBank2Transactions
      responses:
        200:
          description: Successful operation.
        400:
          description: Unsuccessful operation.






components:

  schemas:

    BalanceMessage:
      title: BalanceMessage
      type: object
      description: "Object that encapsulates balance request data."

      properties:
        accountNumber:
          type: number
          description: "An account number associated with a bank"

        routingNumber:
          description: "A routing number associated with a bank"
          type: number
        balance:
          type: string
          description: Balance string that will be populated on response. Does not need to be included in request body.
        errors:
          type: boolean
          description: errors flag.

      required:
        - accountNumber
        - routingNumber




    TransferMessage:
      title: TransferMessage
      type: object
      description: Object that encapsulates transfer request data.

      properties:
        messageId:
          type: number
          description: Transfer ID that will be automatically populated by application.
        creditor:
          $ref: "#/components/schemas/Creditor"
        debtor:
          $ref: "#/components/schemas/Debtor"
        date:
          type: string
          format: "date"
          description: Date of transfer (LocalDate).
        amount:
          type: number
          description: Amount of money ready to be transfered.
          minimum: 0.01
        memo:
          type: string
          description: Additional information relating to the transfer
          # example: "For the bet we made Thursday. Lucky dog."
      required:
        - creditor
        - debtor
        - date
        - amount
        - memo


    Creditor:
      title: Creditor
      type: object
      description: Object that encapsulates Creditor account information

      properties:
        accountNumber:
          type: number
          description: Creditor account number
        routingNumber:
          type: number
          description: Creditor routing number

      required:
        - accountNumber
        - routingNumber

    Debtor:
      title: Debtor
      type: object
      description: Object that encapsulates Creditor account information

      properties:
        accountNumber:
          type: number
          description: Debtor account number
        routingNumber:
          type: number
          description: Debtor routing number


      required:
        - accountNumber
        - routingNumber











